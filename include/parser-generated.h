/*
 * This file was generated by build_grammar.py, DO NOT MODIFY!
 */
#pragma once

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#include "type.h"
#include "dynstring.h"

// order of these two enums is crucial
typedef enum
{
    NT_RETURN_STATEMENT,
    NT_RET_EXPRESSION_LIST,
    NT_STATEMENT_LIST2,
    NT_FUNC_TYPE_LIST,
    NT_EXPRESSION_LIST,
    NT_WHILE_LOOP,
    NT_PROGRAM,
    NT_COND_OPT_ELSEIF,
    NT_OPTIONAL_FUN_EXPRESSION_LIST,
    NT_EXPRESSION,
    NT_EXPRESSION_LIST2,
    NT_TYPE_LIST,
    NT_IDENTIFIER_LIST_WITH_TYPES2,
    NT_STATEMENT,
    NT_TYPE_LIST2,
    NT_RET_EXPRESSION_LIST2,
    NT_REPEAT_UNTIL,
    NT_STATEMENT_LIST,
    NT_FUNC_TYPE_LIST2,
    NT_FUNC_DEF,
    NT_FUNC_CALL,
    NT_FUN_EXPRESSION_LIST2,
    NT_IDENTIFIER_LIST,
    NT_OPT_BINOP,
    NT_BINOP,
    NT_TERM,
    NT_UNOP,
    NT_DECLARATION,
    NT_ASSIGNMENT,
    NT_FUNC_DECL,
    NT_IDENTIFIER_WITH_TYPE,
    NT_IDENTIFIER_LIST2,
    NT_GLOBAL_STATEMENT,
    NT_IDENTIFIER_LIST_WITH_TYPES,
    NT_OPTIONAL_FOR_STEP,
    NT_FOR_LOOP,
    NT_COND_STATEMENT,
    NT_DECL_OPTIONAL_ASSIGNMENT,
    NT_GLOBAL_STATEMENT_LIST,
} nterm_type_t;

typedef enum
{
    T_LTE,
    T_PLUS,
    T_PERCENT,
    T_DOUBLE_SLASH,
    T_EQUALS,
    T_OR,
    T_TILDE_EQUALS,
    T_GTE,
    T_GLOBAL,
    T_ASTERISK,
    T_ELSE,
    T_FUNCTION,
    T_FOR,
    T_BREAK,
    T_REQUIRE,
    T_EOF,
    T_RPAREN,
    T_RETURN,
    T_UNTIL,
    T_IF,
    T_COMMA,
    T_LT,
    T_COLON,
    T_STRING,
    T_MINUS,
    T_SLASH,
    T_LOCAL,
    T_NUMBER,
    T_AND,
    T_GT,
    T_IDENTIFIER,
    T_NIL,
    T_THEN,
    T_HASH,
    T_REPEAT,
    T_BOOL,
    T_LPAREN,
    T_WHILE,
    T_DO,
    T_TYPE,
    T_END,
    T_INTEGER,
    T_ELSEIF,
    T_CARET,
    T_NOT,
    T_DOUBLE_DOT,
    T_DOUBLE_EQUALS,
} term_type_t;

// nterm U term => nut
typedef struct {
    bool is_nterm;
    union {
        nterm_type_t nterm;
        term_type_t term;
    };
} nut_type_t;

typedef struct {
    size_t size;
    nut_type_t *data;
    bool valid;
} exp_list_t;

// hashmap without collisions
typedef struct {
    size_t bucket_count;
    exp_list_t data[];
} parser_table_t;

size_t parser_get_table_index(nterm_type_t nterm, term_type_t term);
const char *nterm_to_readable(nterm_type_t nterm);
const char *term_to_readable(term_type_t term);
int parser_init();
void parser_free();

extern parser_table_t *table;
